{
  "prompt": "<Guidelines>\n        <Guidelines>\n            Use the provided Source Documents when appropriate, otherwise generate new files\n            When possible split files into smaller ones which focuses on a single task\n            When possible use object oriented programming\n            Use xml tags to wrap artifacts, code to execute, instructions other content for easy the machine extraction \n            For artifacts always specify as parsable xml metadata the path relative to the project root and if replaces a given source\n        </Guidelines>\n        </Guidelines><Sources><Source path=\"gui/main_window.py\">\nimport os\nimport logging\nfrom PyQt6.QtWidgets import (QMainWindow, QWidget, QVBoxLayout, QHBoxLayout, \n         QSplitter, QInputDialog, QLabel, QTextEdit, QPushButton)\nfrom PyQt6.QtCore import Qt\nfrom .file_tree import FileTreeView, FileTreeItem\nfrom .widgets import PromptInput, PreviewButton, ConfirmButton, PreviewDisplay, ResponseDisplay\nfrom ai import AIInteraction\n\nclass AIAssistantGUI(QMainWindow):\n    def __init__(self):\n        super().__init__()\n        # Set the initial project folder and populate the file tree\n        self.project_folder = \"/home/sekipaolo/apps/agi/devstudio\"\n\n        self.ai_interaction = AIInteraction(self.project_folder)\n        self.selected_files = None\n        self.initUI()\n\n    def initUI(self):\n        self.setWindowTitle('AI Assistant GUI')\n        self.setGeometry(100, 100, 1200, 800)\n\n        central_widget = QWidget()\n        self.setCentralWidget(central_widget)\n\n        layout = QVBoxLayout()\n        central_widget.setLayout(layout)\n\n        # Create a splitter for resizable panels\n        splitter = QSplitter(Qt.Orientation.Horizontal)\n        layout.addWidget(splitter)\n\n        # Left panel: File tree\n        self.file_tree = FileTreeView()\n        self.file_tree.clicked.connect(self.on_item_clicked)\n        self.file_tree.doubleClicked.connect(self.on_item_double_clicked)\n        splitter.addWidget(self.file_tree)\n\n        # Right panel: Prompt input, Preview, Send button, and Response display\n        right_panel = QWidget()\n        right_layout = QVBoxLayout(right_panel)\n\n        self.prompt_input = PromptInput()\n        right_layout.addWidget(QLabel('Enter your prompt:'))\n        right_layout.addWidget(self.prompt_input)\n\n        self.preview_button = PreviewButton()\n        self.preview_button.clicked.connect(self.preview_prompt)\n        right_layout.addWidget(self.preview_button)\n\n        self.selected_files_display = QTextEdit()\n        self.selected_files_display.setReadOnly(True)\n        self.selected_files_display.setVisible(False)\n        right_layout.addWidget(QLabel('Selected Files:'))\n        right_layout.addWidget(self.selected_files_display)\n\n        self.preview_display = PreviewDisplay()\n        self.preview_display.setVisible(False)\n        right_layout.addWidget(QLabel('Preview:'))\n        right_layout.addWidget(self.preview_display)\n\n        button_layout = QHBoxLayout()\n        self.confirm_button = ConfirmButton()\n        self.confirm_button.clicked.connect(self.confirm_and_send)\n        self.confirm_button.setVisible(False)\n        button_layout.addWidget(self.confirm_button)\n\n        right_layout.addLayout(button_layout)\n\n        self.confirm_button = ConfirmButton()\n        self.confirm_button.clicked.connect(self.confirm_and_send)\n        self.confirm_button.setVisible(False)\n        right_layout.addWidget(self.confirm_button)\n\n        self.response_display = ResponseDisplay()\n        self.response_display.setVisible(False)\n        right_layout.addWidget(QLabel('AI Response:'))\n        right_layout.addWidget(self.response_display)\n\n        splitter.addWidget(right_panel)\n\n        self.populate_file_tree()\n\n    def populate_file_tree(self):\n        logging.debug(\"Populating file tree\")\n        model = self.file_tree.model()\n        if model:\n            model.clear()\n            root = model.invisibleRootItem()\n            self.add_files(self.project_folder, root)\n            logging.debug(f\"File tree populated with {model.rowCount()} root items\")\n        else:\n            logging.error(\"Error: File tree model is not initialized\")\n\n    def add_files(self, directory, parent):\n        logging.debug(f\"Adding files from directory: {directory}\")\n        try:\n            for name in sorted(os.listdir(directory)):\n                if name == '.git' or name == '__pycache__':\n                    continue\n                path = os.path.join(directory, name)\n                if os.path.isdir(path):\n                    logging.debug(f\"Adding directory: {name}\")\n                    folder = FileTreeItem(name, is_dir=True)\n                    self.add_files(path, folder)\n                    parent.appendRow(folder)\n                else:\n                    logging.debug(f\"Adding file: {name}\")\n                    item = FileTreeItem(name)\n                    parent.appendRow(item)\n        except Exception as e:\n            logging.error(f\"Error adding files: {str(e)}\")\n\n    def on_item_clicked(self, index):\n        # This method is now handled in the FileTreeView class\n        pass\n\n    def on_item_double_clicked(self, index):\n        item = self.file_tree.model().itemFromIndex(index)\n        if item.is_dir:  # It's a directory\n            return\n        \n        old_name = item.text()\n        new_name, ok = QInputDialog.getText(self, 'Rename File', 'Enter new file name:', text=old_name)\n        \n        if ok and new_name and new_name != old_name:\n            item.setText(new_name)\n            self.prompt_input.append(f\"\\nPlease rename the file '{old_name}' to '{new_name}'.\")\n\n    def preview_prompt(self):\n        prompt = self.prompt_input.toPlainText()\n        self.selected_files = self.get_selected_files()\n        \n        # Display selected file paths\n        selected_paths = \"\\n\".join([file[\"path\"] for file in self.selected_files])\n        self.selected_files_display.setPlainText(f\"Selected Files:\\n{selected_paths}\")\n        self.selected_files_display.setVisible(True)\n        \n        preview = self.ai_interaction.prepare_prompt(prompt, self.selected_files)\n        self.preview_display.setPlainText(preview)\n        self.preview_display.setVisible(True)\n        self.confirm_button.setVisible(True)\n\n    def confirm_and_send(self):\n        prompt = self.preview_display.toPlainText()\n        \n        if self.selected_files is None:\n            logging.error(\"No files selected. Generate a preview first.\")\n            return\n\n        response, artifacts = self.ai_interaction.process_prompt(prompt, self.selected_files)\n        \n        self.response_display.setPlainText(response)\n        self.response_display.setVisible(True)\n        self.preview_display.setVisible(False)\n        self.selected_files_display.setVisible(False)\n        self.confirm_button.setVisible(False)\n        self.display_artifacts(artifacts)\n\n        # Reset selected_files after sending\n        self.selected_files = None\n\n    def get_selected_files(self):\n        selected_files = []\n        def traverse(parent):\n            for row in range(parent.rowCount()):\n                child = parent.child(row)\n                if child.checkState() == Qt.CheckState.Checked and not child.is_dir:\n                    file_path = self.get_file_path(child)\n                    with open(file_path, 'r') as file:\n                        content = file.read()\n                    selected_files.append({\"path\": file_path, \"content\": content})\n                if child.hasChildren():\n                    traverse(child)\n        \n        root = self.file_tree.model().invisibleRootItem()\n        traverse(root)\n        \n        return selected_files\n\n    def get_file_path(self, item):\n        path = []\n        while item is not None:\n            path.append(item.text())\n            item = item.parent()\n        return os.path.join(self.project_folder, *reversed(path))\n\n    def display_artifacts(self, artifacts):\n        for i, artifact in enumerate(artifacts):\n            print(f\"Artifact {i+1}:\")\n            print(artifact)\n            print()\n</Source>\n</Sources><Task>Split main_window into smaller modules</Task>\n\n",
  "response": "{\n  \"id\": \"msg_01KqqNeeo9853qwnMLompc4a\",\n  \"content\": [\n    {\n      \"text\": \"Certainly! I'll split the `main_window.py` file into smaller modules to improve organization and maintainability. Here's how we can break it down:\\n\\n1. `main_window.py`: This will contain the main `AIAssistantGUI` class with the core structure.\\n2. `file_manager.py`: This will handle file-related operations.\\n3. `ui_components.py`: This will contain the UI setup and component initialization.\\n4. `event_handlers.py`: This will contain the event handling methods.\\n\\nLet's create these files:\\n\\n<Artifact path=\\\"gui/main_window.py\\\" replace=\\\"true\\\">\\n```python\\nimport logging\\nfrom PyQt6.QtWidgets import QMainWindow, QWidget, QVBoxLayout, QSplitter\\nfrom PyQt6.QtCore import Qt\\nfrom .file_manager import FileManager\\nfrom .ui_components import UIComponents\\nfrom .event_handlers import EventHandlers\\nfrom ai import AIInteraction\\n\\nclass AIAssistantGUI(QMainWindow):\\n    def __init__(self):\\n        super().__init__()\\n        self.project_folder = \\\"/home/sekipaolo/apps/agi/devstudio\\\"\\n        self.ai_interaction = AIInteraction(self.project_folder)\\n        self.selected_files = None\\n        \\n        self.file_manager = FileManager(self.project_folder)\\n        self.ui_components = UIComponents(self)\\n        self.event_handlers = EventHandlers(self)\\n\\n        self.initUI()\\n\\n    def initUI(self):\\n        self.setWindowTitle('AI Assistant GUI')\\n        self.setGeometry(100, 100, 1200, 800)\\n\\n        central_widget = QWidget()\\n        self.setCentralWidget(central_widget)\\n\\n        layout = QVBoxLayout()\\n        central_widget.setLayout(layout)\\n\\n        splitter = QSplitter(Qt.Orientation.Horizontal)\\n        layout.addWidget(splitter)\\n\\n        self.ui_components.setup_left_panel(splitter)\\n        self.ui_components.setup_right_panel(splitter)\\n\\n        self.file_manager.populate_file_tree(self.ui_components.file_tree)\\n```\\n</Artifact>\\n\\n<Artifact path=\\\"gui/file_manager.py\\\" replace=\\\"false\\\">\\n```python\\nimport os\\nimport logging\\nfrom PyQt6.QtCore import Qt\\nfrom .file_tree import FileTreeItem\\n\\nclass FileManager:\\n    def __init__(self, project_folder):\\n        self.project_folder = project_folder\\n\\n    def populate_file_tree(self, file_tree):\\n        logging.debug(\\\"Populating file tree\\\")\\n        model = file_tree.model()\\n        if model:\\n            model.clear()\\n            root = model.invisibleRootItem()\\n            self.add_files(self.project_folder, root)\\n            logging.debug(f\\\"File tree populated with {model.rowCount()} root items\\\")\\n        else:\\n            logging.error(\\\"Error: File tree model is not initialized\\\")\\n\\n    def add_files(self, directory, parent):\\n        logging.debug(f\\\"Adding files from directory: {directory}\\\")\\n        try:\\n            for name in sorted(os.listdir(directory)):\\n                if name == '.git' or name == '__pycache__':\\n                    continue\\n                path = os.path.join(directory, name)\\n                if os.path.isdir(path):\\n                    logging.debug(f\\\"Adding directory: {name}\\\")\\n                    folder = FileTreeItem(name, is_dir=True)\\n                    self.add_files(path, folder)\\n                    parent.appendRow(folder)\\n                else:\\n                    logging.debug(f\\\"Adding file: {name}\\\")\\n                    item = FileTreeItem(name)\\n                    parent.appendRow(item)\\n        except Exception as e:\\n            logging.error(f\\\"Error adding files: {str(e)}\\\")\\n\\n    def get_selected_files(self, file_tree):\\n        selected_files = []\\n        def traverse(parent):\\n            for row in range(parent.rowCount()):\\n                child = parent.child(row)\\n                if child.checkState() == Qt.Check\",\n      \"type\": \"text\"\n    }\n  ],\n  \"model\": \"claude-3-5-sonnet-20240620\",\n  \"role\": \"assistant\",\n  \"stop_reason\": \"max_tokens\",\n  \"stop_sequence\": null,\n  \"type\": \"message\",\n  \"usage\": {\n    \"input_tokens\": 4414,\n    \"output_tokens\": 999\n  }\n}",
  "timestamp": "2024-07-13T15:58:10.661738"
}