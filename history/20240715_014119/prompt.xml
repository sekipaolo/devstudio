&lt;Guidelines&gt;
            Format your answer as an XML document as this example. Remember to escape XML tags characters (&lt; and &gt;) characters:
           &lt;response&gt;
               &lt;text&gt;Any text not related to file changes&lt;/text&gt;
               &lt;file-changes&gt;
                   &lt;file path="gui/widgets.py" action="replace"&gt;
                        Here the full runnable content of the file
                   &lt;/file&gt;
                   &lt;file path="gui/new_file.py" action="create"&gt;
                        Here the full content of the newly created file
                   &lt;/file&gt;
                   &lt;file path="gui/deleted_file.py" action="delete"/&gt;
                   &lt;explanation&gt;
                        Here the explanation of the changes
                   &lt;/explanation&gt;                    
               &lt;/file-changes&gt;
           &lt;/response&gt;
        &lt;/Guidelines&gt;&lt;Sources&gt;&lt;Source path="ai/interaction.py"&gt;
import datetime
import os
from anthropic import Anthropic
from dotenv import load_dotenv
from .response_processor import ResponseProcessor
from .prompt_processor import PromptProcessor

load_dotenv()
import logging

logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)

class AIInteraction:
    def __init__(self, project_root):
        self.anthropic = Anthropic(api_key=os.getenv("ANTHROPIC_API_KEY"))
        self.project_root = project_root
        self.selected_files = None
        self.prompt_processor = PromptProcessor(project_root)
        logger.debug(f"AIInteraction initialized with project root: {project_root}")

    def process_prompt(self, prompt, selected_files):
        logger.debug("Processing prompt")
        timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        self.history_dir = os.path.join('history', timestamp)
        self.artifacts_dir = os.path.join(self.history_dir, 'artifacts')
        os.makedirs(self.history_dir, exist_ok=True)
        os.makedirs(self.artifacts_dir, exist_ok=True)
        logger.debug(f"Created history directory: {self.history_dir}")

        formatted_prompt = self.prompt_processor.prepare_prompt(prompt, selected_files)
        # Save prompt
        with open(os.path.join(self.history_dir, 'prompt.xml'), 'w') as f:
            f.write(formatted_prompt)
        logger.debug("Saved prompt to history")

        logger.debug("Sending request to Anthropic API")
        raw_response = self.anthropic.messages.create(
            model="claude-3-5-sonnet-20240620",
            max_tokens=4096,
            messages=[
                {"role": "user", "content": formatted_prompt}
            ]
        )
        logger.debug("Received response from Anthropic API")

        response = raw_response.content[0].text
        # Save response
        with open(os.path.join(self.history_dir, 'response.xml'), 'w') as f:
            f.write(response)
        logger.debug("Saved response to history")

        processor = ResponseProcessor(self.project_root, self.artifacts_dir)
        processor.process_response(response)
        logger.debug("Processed response")
            
        logger.info("Response processed. Please check the 'history' directory for the saved chat and artifacts.")
        return response, processor
&lt;/Source&gt;
&lt;Source path="gui/ai_assistant_logic.py"&gt;
import os
import logging
from typing import List, Dict, Optional
from ai import AIInteraction

class AIAssistantLogic:
    def __init__(self, project_folder: str):
        self.project_folder: str = project_folder
        self.ai_interaction: AIInteraction = AIInteraction(self.project_folder)
        self.file_changes: Dict[str, str] = {}
        
        # Set up logging
        logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        self.logger = logging.getLogger(__name__)
        self.logger.debug("AIAssistantLogic initialized with project folder: %s", self.project_folder)

    def process_prompt(self, prompt: str, selected_files: List[Dict[str, str]]):
        self.logger.debug("Processing prompt: %s", prompt)
        self.logger.debug("Selected files: %s", selected_files)
        result = self.ai_interaction.process_prompt(prompt, selected_files)
        return result

    def get_file_preview_content(self, file_path: str, change_type: str) -&gt; str:
        self.logger.debug("Getting file preview content for %s (change type: %s)", file_path, change_type)
        if change_type == "create" or change_type == "update":
            full_path = os.path.join(self.ai_interaction.tmp_dir, file_path)
            self.logger.debug("Reading file from temporary directory: %s", full_path)
            with open(full_path, 'r') as file:
                content = file.read()
        elif change_type == "delete":
            self.logger.debug("File marked for deletion: %s", file_path)
            content = "This file has been marked for deletion."
        else:
            full_path = os.path.join(self.project_folder, file_path)
            self.logger.debug("Reading file from project directory: %s", full_path)
            with open(full_path, 'r') as file:
                content = file.read()
        self.logger.debug("File preview content length: %d", len(content))
        return content

    def apply_file_changes(self):
        self.logger.debug("Applying file changes")
        for file_path, change_type in self.file_changes.items():
            self.logger.debug("Processing file: %s (change type: %s)", file_path, change_type)
            if change_type == "create" or change_type == "update":
                src_path = os.path.join(self.ai_interaction.tmp_dir, file_path)
                dst_path = os.path.join(self.project_folder, file_path)
                self.logger.debug(f"{change_type}ing {dst_path}")
                os.makedirs(os.path.dirname(dst_path), exist_ok=True)
                with open(src_path, 'r') as src_file, open(dst_path, 'w') as dst_file:
                    content = src_file.read()
                    dst_file.write(content)
                self.logger.debug("File created/updated successfully: %s", dst_path)
            elif change_type == "delete":
                file_to_delete = os.path.join(self.project_folder, file_path)
                self.logger.debug("Deleting file: %s", file_to_delete)
                os.remove(file_to_delete)
                self.logger.debug("File deleted successfully: %s", file_to_delete)
        
        self.logger.debug("All file changes applied, clearing file_changes dictionary")
        self.file_changes.clear()

&lt;/Source&gt;
&lt;/Sources&gt;&lt;Task&gt;Make privates every method in interaction.py which are not called by ai_assistant_logic.py&lt;/Task&gt;

