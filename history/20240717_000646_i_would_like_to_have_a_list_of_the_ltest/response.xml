Here's my proposed implementation for adding a list of the latest 3 git commits and the ability to rollback to any of them from the main window:

<response>
    <text>
To implement this feature, we'll need to modify the main_window.py file. We'll add a new method to fetch the latest 3 commits, display them in a list, and add a rollback functionality. We'll also update the UI to include these new elements.
    </text>
    <file-changes>
        <file path="gui/main_window.py" action="update">
import os
import logging
import subprocess
from typing import List, Dict, Optional
from PyQt6.QtWidgets import (QMainWindow, QWidget, QVBoxLayout, QHBoxLayout, 
         QSplitter, QInputDialog, QLabel, QTextEdit, QPushButton, QListWidget, QListWidgetItem, QMessageBox, QCheckBox, QFileDialog)
from PyQt6.QtCore import Qt, QTimer
from PyQt6.QtGui import QIcon
from .file_tree import FileTreeView, FileTreeItem
from .widgets import (PromptInput, ConfirmButton, ResponseDisplay, StatusProgressBar, StatusLabel, FileChangeWidget, CommitListWidget)
from .file_preview_popup import FilePreviewPopup
from .ai_assistant_logic import AIAssistantLogic

class AIAssistantGUI(QMainWindow):
    def __init__(self):
        super().__init__()
        self.logic = AIAssistantLogic("/home/sekipaolo/apps/agi/devstudio")
        self.setup_logging()
        self.initUI()

    # ... (previous methods remain unchanged)

    def initUI(self):
        # ... (previous UI setup remains unchanged)

        # Add CommitListWidget
        self.commit_list_widget = CommitListWidget(self.logic.project_folder)
        right_layout.addWidget(QLabel('Latest Commits:'))
        right_layout.addWidget(self.commit_list_widget)

        # Add Refresh Commits button
        self.refresh_commits_button = QPushButton("Refresh Commits")
        self.refresh_commits_button.clicked.connect(self.refresh_commits)
        right_layout.addWidget(self.refresh_commits_button)

        # Add Rollback button
        self.rollback_button = QPushButton("Rollback to Selected Commit")
        self.rollback_button.clicked.connect(self.rollback_to_commit)
        right_layout.addWidget(self.rollback_button)

        # ... (rest of the UI setup remains unchanged)

    def refresh_commits(self):
        self.commit_list_widget.refresh_commits()

    def rollback_to_commit(self):
        selected_commit = self.commit_list_widget.get_selected_commit()
        if selected_commit:
            confirm = QMessageBox.question(self, "Confirm Rollback", 
                                           f"Are you sure you want to rollback to commit:\n{selected_commit}?",
                                           QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No)
            if confirm == QMessageBox.StandardButton.Yes:
                try:
                    subprocess.run(['git', 'reset', '--hard', selected_commit.split()[0]], 
                                   cwd=self.logic.project_folder, check=True)
                    QMessageBox.information(self, "Rollback Successful", 
                                            f"Successfully rolled back to commit:\n{selected_commit}")
                    self.populate_file_tree()  # Refresh the file tree
                    self.refresh_commits()  # Refresh the commit list
                except subprocess.CalledProcessError as e:
                    QMessageBox.critical(self, "Rollback Failed", 
                                         f"Failed to rollback to commit:\n{selected_commit}\nError: {str(e)}")
        else:
            QMessageBox.warning(self, "No Commit Selected", "Please select a commit to rollback to.")

    # ... (rest of the class remains unchanged)
        </file>
        <file path="gui/widgets.py" action="update">
from PyQt6.QtWidgets import QTextEdit, QPushButton, QLabel, QProgressBar, QListWidgetItem, QWidget, QHBoxLayout, QListWidget
from PyQt6.QtCore import Qt, pyqtSignal
from PyQt6.QtGui import QFont, QIcon
from ai.xml_parser import XMLParser
import subprocess

# ... (previous widget classes remain unchanged)

class CommitListWidget(QListWidget):
    def __init__(self, project_folder, parent=None):
        super().__init__(parent)
        self.project_folder = project_folder
        self.refresh_commits()

    def refresh_commits(self):
        self.clear()
        try:
            result = subprocess.run(['git', 'log', '-3', '--oneline'], 
                                    cwd=self.project_folder,
                                    capture_output=True, text=True, check=True)
            commits = result.stdout.strip().split('\n')
            for commit in commits:
                self.addItem(commit)
        except subprocess.CalledProcessError as e:
            self.addItem("Unable to retrieve commits")

    def get_selected_commit(self):
        selected_items = self.selectedItems()
        if selected_items:
            return selected_items[0].text()
        return None
        </file>
        <explanation>
1. In the main_window.py file:
   - We've added a new CommitListWidget to display the latest commits.
   - We've added a "Refresh Commits" button to update the commit list.
   - We've added a "Rollback to Selected Commit" button to perform the rollback operation.
   - We've implemented two new methods: refresh_commits() and rollback_to_commit().
   - The rollback_to_commit() method checks for a selected commit, asks for confirmation, and then performs the rollback using git reset --hard.

2. In the widgets.py file:
   - We've added a new CommitListWidget class that inherits from QListWidget.
   - This widget handles fetching and displaying the latest 3 commits.
   - It also provides a method to get the currently selected commit.

These changes will add the requested functionality to list the latest 3 git commits and allow rolling back to any of them from the main window. The user can refresh the commit list and select a commit to roll back to, with a confirmation dialog to prevent accidental rollbacks.
        </explanation>
    </file-changes>
</response>